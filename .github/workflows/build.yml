# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: anonymizer-test-build-upload

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:

  release:
    runs-on: ubuntu-latest
    steps:
    - name: Check version
      run: |
        echo "Version: ${{ env.version }}"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }} 
      with:
        tag_name: ${{ env.version }}
        release_name: Release ${{ env.version }}
        draft: false
        prerelease: false
      if: ! contains(env.version, 'd')
  
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
          python-version: "3.11"

    - name: Install pipenv for virtual environment
      run: |
          pip install pipenv

    - name: Install dependencies including development dependencies
      run: |
          pipenv install --dev
    
    - name: Run Unit Tests within pipenv with pytest and generate coverage report
      run: |
        pipenv run coverage run -m pytest tests --log-cli-level=WARN
        pipenv run coverage report --omit="tests/*" --fail-under=60

    - name: List site-packages
      run: |
        pipenv run python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())"
        
    - name: PyInstaller - Build for ${{ matrix.os }}
      run: |
        pipenv run python build.py
  
    - name: Create zip file
      run: |
        7z a dist.zip dist\
      
    # - name: Upload Artifact for ${{ matrix.os }}
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: anonymizer-${{ matrix.os }}-${{ env.version }}
    #     path: 'dist'
    #     if-no-files-found: error
    #     retention-days: 2


    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./dist.zip
        asset_name: anonymizer-${{ matrix.os }}-${{ env.version }}.zip
        asset_content_type: application/zip
      if: ! contains(env.version, 'd')
        

